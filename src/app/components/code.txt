"use client";
import Image from "next/image";

import { client } from "@/sanity/lib/client";
import Link from "next/link";
import { useEffect, useState } from "react";
import checkout from "../Action/checkout";
import { Product } from "../type";

function ProductSection() {
  const [product, setProduct] = useState<Product[]>([]);
  const [cart, setCart] = useState<Product[]>([]);
  const [ischekout, setCheckOut] = useState(false);
  const [customerInfo, setCustomerInfo] = useState({
    name: "",
    email: "",
    phone: "",
  });
  const [records, setRecords] = useState<Product[]>([]);
  const [currentPage, setCurrentPage] = useState(1); // Track current page
  const [totalPages, setTotalPages] = useState(0); // Total pages to display
  const itemsPerPage = 8;

  const startNumber = (currentPage - 1) * itemsPerPage;
  const endNumber = currentPage * itemsPerPage ;
  const fetchData = async () => {
    // Fetch total product count for totalPages calculation
    const totalProducts = await client.fetch(`*[_type == "product"]`);
    setTotalPages(Math.ceil(totalProducts.length / itemsPerPage));

    try {
      const query = `
              *[_type=='product'][${startNumber}...${endNumber}]{
              title,
              description,
              price,
              tags,
              _id,
              "image_url":productImage.asset->url
              
              
             }`;
      const data: Product[] = await client.fetch(query);
      setProduct(data);
      setRecords(data);
    } catch (error) {
      console.error("error", error);
    }
  };

  const HandleOnChange = (e: any) => {
    const { name, value } = e.target;
    setCustomerInfo({ ...customerInfo, [name]: value });
  };

  const handOnsubmit = () => {
    checkout(cart, customerInfo);
    alert(`Thank you for your purchase!

Order Number : ${Math.random()}
We are processing your order. You will receive an email confirmation shortly. You can track your order in your account.`);
  };

  const addToCart = (product: Product) => {
    setCart((prevCart) => [...prevCart, product]);
    alert(`${product.title} has been added to your cart!`);
  };

  const removeFromCart = (index: number) => {
    setCart((prevCart) => prevCart.filter((_, i) => i !== index));
  };
  const handleCheckOut = () => {
    setCheckOut(!ischekout);
  };
  

  useEffect(() => {
    fetchData();
  }, [currentPage]);

  const filter = (e: any) => {
    setRecords(
      product.filter((f) =>
        f.title.toLowerCase().includes(e.target.value.toLowerCase())
      )
    );
  };

    // Handle next button click
    const handleNext = () => {
      if (currentPage < totalPages) {
        setCurrentPage(currentPage + 1); // Increase current page number
      }
    };
  
    // Handle prev button click
    const handlePrev = () => {
      if (currentPage > 1) {
        setCurrentPage(currentPage - 1); // Decrease current page number
      }
    };
  
    // Handle page number click
    const handlePageClick = (page: number) => {
      setCurrentPage(page); // Set clicked page as current page
    };
  
    // Generate page numbers for pagination
    const pageNumbers = [];
    for (let i = 1; i <= totalPages; i++) {
      pageNumbers.push(i);
    }

  return (
    <section className="text-gray-600 body-font">
      <div className="container px-5 py-24 mx-auto">
        <div className="text-center mb-12">
          <p className="text-base font-normal text-[20px] leading-relaxed xl:w-2/4 lg:w-3/4 mx-auto text-gray-500">
            Featured Product
          </p>
          <h1 className="sm:text-3xl text-[24px] font-bold title-font text-gray-900 mb-4">
            BESTSELLER PRODUCTS
          </h1>
          <p className="text-base text-[14px] font-normal leading-relaxed xl:w-2/4 lg:w-3/4 mx-auto text-gray-500">
            Problems trying to resolve the conflict between
          </p>
        </div>
        <input
          className="w-full py-2 text-lg rounded-md px-5 mb-3"
          type="text"
          onChange={filter}
          placeholder="Search Product"
        />
        <div className="flex flex-wrap -m-4">
          {records.slice(0, 20).map((product) => (
            <div
              key={product._id}
              className="lg:w-1/4 md:w-1/2 p-4 w-full transform transition duration-300 hover:scale-105"
            >
              <div className="block relative h-[430px] w-full rounded overflow-hidden mx-auto">
                <Link href={`/productDetail/${product._id}`}>
                  <Image
                    alt="ecommerce"
                    className="object-cover object-center w-full h-full block"
                    src={product.image_url}
                    layout="fill"
                    objectFit="cover"
                  />
                </Link>
              </div>
              <div className="mt-4 text-left">
                <span className="text-gray-500 text-xs tracking-widest title-font mb-1">
                  {product.title}
                </span>
                <h2 className="text-gray-900 title-font text-lg font-medium line-clamp-2">
                  {product.description}
                </h2>
                <p className="mt-1">
                  ${product.price}{" "}
                  {/* <span className="line-through">{product.oldPrice}</span> */}
                </p>
                <p className="flex gap-2 flex-wrap">
                  {product.tags.map((item, index) => (
                    <div
                      className="bg-gray-400 text-gray-800 rounded-md px-2"
                      key={index}
                    >
                      {item}
                    </div>
                  ))}
                </p>

                <button
                  className="mt-4 w-full bg-blue-600 text-white py-2 rounded-md hover:bg-blue-700"
                  onClick={() => {
                    addToCart(product);
                  }}
                >
                  Add to Cart
                </button>
              </div>
            </div>
          ))}
        </div>

        <div className="bg-gray-100 p-4 rounded-md mt-8">
          <h1 className="text-xl font-semibold mb-4">Cart Summary</h1>
          {cart.length > 0 ? (
            <ul>
              {cart.map((item, index) => (
                <li
                  key={index}
                  className="flex items-center justify-between py-2 border-b"
                >
                  <div>
                    <p className="font-medium">{item.title}</p>
                    <p className="text-gray-500 text-sm">${item.price}</p>
                  </div>
                  <div className="flex gap-6">
                    <Image
                      height={50}
                      width={50}
                      className="rounded-md"
                      src={item.image_url}
                      alt={item.title}
                    />
                    <button
                      onClick={() => removeFromCart(index)}
                      className="ml-2 px-2 py-1 bg-red-500 text-white rounded-md hover:bg-red-600"
                    >
                      Delete
                    </button>
                  </div>
                </li>
              ))}
            </ul>
          ) : (
            <p className="text-gray-500">
              Your Cart is empty please add products
            </p>
          )}

          
        </div>
         
      <div className="flex justify-center my-4">
      
        <button onClick={handlePrev} className="bg-blue-400 p-2 mx-2" disabled={currentPage === 1}>
          Prev
        </button>

      
        {pageNumbers.map((page) => (
          <button
            key={page}
            onClick={() => handlePageClick(page)}
            className={`p-2 mx-1 ${currentPage === page ? 'bg-blue-600 text-white' : 'bg-blue-200'}`}
          >
            {page}
          </button>
        ))}

        {/* Next Button */}
        <button onClick={handleNext} className="bg-blue-400 p-2 mx-2" disabled={currentPage === totalPages}>
          Next
        </button>
      </div>
        <button
          onClick={handleCheckOut}
          className="bg-blue-600 text-white w-full rounded-md py-2"
        >
          CheckOut
        </button>
        {ischekout && (
          <div className="flex flex-col text-gray-800 font-medium gap-4 p-6 bg-white rounded-lg shadow-md">
            <label htmlFor="name">Name:</label>
            <input
              className="border border-gray-300 px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              type="text"
              id="name"
              name="name"
              required
              onChange={HandleOnChange}
              value={customerInfo.name}
            />

            <label htmlFor="email">Email:</label>
            <input
              className="border border-gray-300 px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              type="email"
              id="email"
              name="email"
              required
              onChange={HandleOnChange}
              value={customerInfo.email}
            />

            <label htmlFor="phone">Phone:</label>
            <input
              className="border border-gray-300 px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              type="tel"
              id="phone"
              name="phone"
              required
              onChange={HandleOnChange}
              value={customerInfo.phone}
            />

            <button
              onClick={handOnsubmit}
              className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:shadow-outline"
            >
              Submit
            </button>
          </div>
        )}
      </div>
    </section>
  );
}

export default ProductSection;